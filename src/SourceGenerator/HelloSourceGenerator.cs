namespace SourceGenerator
{
    using Microsoft.CodeAnalysis;

    /// <summary>
    /// 
    /// </summary>
    /// <summary>
    /// cf. https://learn.microsoft.com/ja-jp/dotnet/csharp/roslyn-sdk/source-generators-overview#get-started-with-source-generators
    /// </summary>
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        /// <summary>
        /// Called before generation occurs. A generator can use the <paramref name="context" />
        /// to register callbacks required to perform generation.
        /// </summary>
        /// <param name="context">The <see cref="T:Microsoft.CodeAnalysis.GeneratorInitializationContext" /> to register callbacks on</param>
        public void Initialize(GeneratorInitializationContext context)
        {
            // do nothing.
        }

        /// <summary>
        /// Called to perform source generation. A generator can use the <paramref name="context" />
        /// to add source files via the <see cref="M:Microsoft.CodeAnalysis.GeneratorExecutionContext.AddSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)" />
        /// method.
        /// </summary>
        /// <param name="context">The <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext" /> to add source to</param>
        /// <remarks>
        /// This call represents the main generation step. It is called after a <see cref="T:Microsoft.CodeAnalysis.Compilation" /> is
        /// created that contains the user written code.
        /// A generator can use the <see cref="P:Microsoft.CodeAnalysis.GeneratorExecutionContext.Compilation" /> property to
        /// discover information about the users compilation and make decisions on what source to
        /// provide.
        /// </remarks>
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            // コンパイルのエントリポイントを取得する。
            // エントリポイント ≒ Main メソッド
            // IMethodSymbol はコンストラクタ、デストラクタ、演算子、プロパティ、イベント、アクセサーなどを含む"シンボル"を表している。
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            // Build up the source code
            string source = $@"// <auto-generated/>
    using System;

    namespace {mainMethod.ContainingNamespace.ToDisplayString()}
    {{
        public static partial class {mainMethod.ContainingType.Name}
        {{
            static partial void HelloFrom(string name) =>
                Console.WriteLine($""Generator says: Hi from '{{name}}'"");
        }}
    }}
    ";
            var typeName = mainMethod.ContainingType.Name;

            // Add the source code to the compilation
            // ここでソースを生成している。
            // .AddSource() で生成する際は、拡張子を".g.cs"や".generated.cs"とすることで、自動生成されたものかどうかを識別することができる。
            context.AddSource($"{typeName}.g.cs", source);
        }
    }
}
